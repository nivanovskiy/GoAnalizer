Необходимо создать приложение на go 
Оно должно уметь хранить результаты своих действий в Postgres.
У него должны быть следующие методы:

/initAnalize/{tenant}/{repo}/{uuid}. Этот метод инициирует пайплайн анализа данных. В path параметрах он получает tenant и репозиторий проекта, uuid - это идентификатор теста, а в body информацию о проекте. В информацию входит язык проекта, название утилиты нагрузочного тестирования (gatling, k6 и тд), входные параметры тестирования (test или production стенд, ожидаемая нагрузка, которая будет подаваться в рамках теста, параметры времени подачи нагрузки, ступени, при наличии профиль нагрузки и нефункциональные требования), а также количество файлов с кодом, которые находятся в проекте. После получения этой информации, приложение создает запись в базе данных и начинает ожидать получения нужного числа файлов. В ответе возвращается uuid анализа, созданного в бд. После чего необхдимо обратиться к модели по rest api и спросить у нее как у эксперта по тестированию производительности, видит ли она в полученных входных данных проблемы, какие, объяснить их и дать рекомендации по устранениию. Ответ от модели попросить в формате json, где проблемы будут сложены в массив, и у каждой проблемы будут поля: имя, описание, рекомендации по устранению и критичность. 

/sendFile/{uuid} Этот метод вызывается для каждого файла в проекте, и в path он содержит uuid - это идентификатор теста, а в body сам файл с кодом проекта. После получения файла, сервис обращается по restApi к модели, которую просит проанализировать файл как эксперта по тестированию производительности. В дополнительные вводные передаеются параметры тестирования из предыдущего шага. Требуется, чтобы модель собрала список проблем и подозрений на проблемы, по файлу, с названием каждого элемента, его объяснением, и координатами в коде. Данные сохраняются в базу данных. Если подозрение подтвержается в процессе анализа других файлов, оно меняется с подозрения на проблему, поэтому рекомендую завести поле "сомнительность" и менять его значение в зависимости от того, подтверждена проблема или нет. Ответ от модели попросить в формате json, где проблемы будут сложены в массив, и у каждой проблемы будут поля: имя, описание, рекомендации по устранению. место в коде и критичность. 

/sendResults{uuid} Этот метод вызывается после фактического окончания нагрузочного теста. В path он содержит uuid - это идентификатор теста, а в body резултаты теста (метрики responseTime для каждого метода (95 и 99 персентили), число успешных и неуспешных вызовов, соответствие нефункциональным требованиям и профилю нагрузки)

/getAnalizeResults{uuid} Этот метод вызывается для получения результатов анализа теста производительности, о котором ниже. В случае, если анализ еще не завершен, метод отдает код 202. Когда анализ будет готов отдавать все имеющиеся данные в json

В фоне приложение ожидает получения и обработки всех файлов, а так же результатов тестирования. После чего, обращается по restApi к модели, которую просит обработать результаты, как эксперта по тестированию производительности. Необходимо объяснить простым языком полученные результаты и, если они связаны с проблемами, найдеными в файлах, то связать их. Так же нужно сделать выводы, корректно ли был проведен тест исходя из входных данных. Ответ у модели просить в формате json.

Описание запроса к модели
url localhost:1234
path /api/v1/query

body (все поля кроме query оставить пустыми. Текст файла с кодом так же класть в поле query, данные в этом поле должны быть экранированы)
{
  "query": "Текст промпта",
  "threshold": 0,
  "system_prompt": "",
  "prompt_variables": {},
  "filter_expr": "",
  "top_k": 0
}


responcse body (данные будут находиться в поле content, остальные поля можно игнорировать)
{
  "content": "string",
  "chunks": [
    {
      "metadata": {
        "doc_id": "string",
        "hash": "string",
        "datasource_id": 0,
        "pipeline_id": 0,
        "chunk_index": 0,
        "project_id": 0,
        "additionalProp1": {}
      },
      "content": "string",
      "embeddings": [
        0
      ],
      "score": 0
    }
  ]
